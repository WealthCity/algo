import datetime
import pandas as pd
import quandl
from securities_master import Exchange,Data_Vendor,Symbol,Daily_Price
 

now = datetime.datetime.now()
exchange = [{
		'abbrev':'asx',
		'name':'Australian Stock Exchange',
		'city':'Sydney',
		'country':'Australia',
		'currency':'AUD',
		'timezone_offset':0
		}]
data_vendor = [{'name':'quandl',
		'website_url':'https://www.quandl.com/data/XASX?keyword=australian',
		'support_email':''
		}]



def open_ASX_listing_from_csv(path):
	"""Function to open ASX listing csv and save to data frame """
	asx_listing = pd.read_csv(path)
	print(asx_listing.head())
	print(asx_listing.tail())
	return (asx_listing)


def insert_exchange(exchanges,now):
	"""Function to insert exchange information into securities master database"""
	
	for exchange in exchanges:
		print('Inserting row into Exchange Table')
		print(exchange)
		try:
			Exchange.create(abbrev=exchange['abbrev'],
					name =exchange['name'],
					city =exchange['city'],
					country=exchange['country'],
					currency=exchange['currency'],
					timezone_offset=exchange['timezone_offset'],
					created_date = now,
					last_updated_date=now)
		except:
			print('{} already exists'.format(exchange['abbrev']))
			exchange_record = Exchange.get(abbrev=exchange['abbrev'])
			print(exchange_record)
			exchange_record.name=exchange['name']
			exchange_record.city=exchange['city']
			exchange_record.currency=exchange['currency']
			exchange_record.time_zone_offset = exchange['timezone_offset']
			exchange_record.last_updated_date =now
			exchange_record.save()
			
def insert_data_vendor(data_vendors,now):
	"""Function to insert data vendor  information into securities master data base"""
	
	
	for data_vendor in data_vendors:
		try:
			print('Inserting row into Data Vendor Table')
			print(data_vendor)
			Data_Vendor.create(name=data_vendor['name'],
					website_url =data_vendor['website_url'] ,
					support_email =data_vendor['support_email'] ,
					created_date = now,
					last_updated_date=now)
		except:
		
	
			print('{} already exists'.format(data_vendor['name']))
			data_vendor_record = Data_Vendor.get(name=data_vendor['name'])
			print(data_vendor_record)
			data_vendor_record.website_url=data_vendor['website_url']
			data_vendor_record.support_email=data_vendor['support_email']
			data_vendor_record.last_updated_date =now
			data_vendor_record.save()

def insert_symbols(data_frame,now,exchange,instrument,currency):
	"""Function to take data frame and save it to securities master database"""
	
	# convert the data frame to a list of dictionaries
	symbols = data_frame.to_dict('records')
	print(str(symbols))	
	# get existing list of exchange abbreviation and asx code, test for duplicates
	existing_exchanges = Exchange.select()
	existing_exchange_list =  [existing_exchange.abbrev for existing_exchange in existing_exchanges]
	print(existing_exchange_list)
	
	existing_symbols= Symbol.select()		
	existing_symbol_list= [existing_symbol.ticker for existing_symbol in existing_symbols]
	print(existing_symbol_list)	


	for symbol in symbols:
		print(str(symbol))
		print(symbol['ASX code'])
		if symbol['ASX code'] in existing_symbol_list:		
			print('{} {} already exists'.format(exchange,symbol['ASX code']))
			symbol_record = Symbol.get(ticker=symbol['ASX code'])
			print(symbol_record)
			symbol_record.instrument=instrument
			symbol_record.name=name=symbol['Company name']
			symbol_record.sector=symbol['GICS industry group']
			symbol_record.currency=currency
			symbol_record.last_updated_date=now
			symbol_record.save()
			

		else:
			Symbol.create(exchange=Exchange.get(abbrev=exchange).id,
					ticker=symbol['ASX code'],
					instrument=instrument,
					name=symbol['Company name'],
					sector=symbol['GICS industry group'],
					currency=currency,
					created_date=now,
					last_updated_date=now)
		

	# first time - save all data
	
	# second time -if ntegrity error, only save update
def insert_daily_price(ticker,data_vendor):
	now = datetime.datetime.now()
	default_start_time = datetime.datetime(1970,1,1).strftime('%Y-%m-%d')
	#print(default_start_time)
	now_string = now.strftime('%Y-%m-%d')
	
	
	#get Symbol table for the ticker
	symbol_id = Symbol.get(ticker = ticker).id
	print(symbol_id)	
	existing_price_data  = Daily_Price.select()
	
	print(existing_price_data)	
	existing_symbols_in_price_data =[existing_price_record.symbol_id for existing_price_record in existing_price_data]	

	existing_symbols_in_price_data = set(existing_symbols_in_price_data)	
	print(existing_symbols_in_price_data)	
	
	#get the exchange of the symbol
	exchange_id = Symbol.get(ticker=ticker).exchange
	
	#get the data_vendor of the symbol
	vendor_data_id=Data_Vendor.get(name =data_vendor).id
	# if the ticker exists, check the last date

	data = pd.DataFrame()
	
	
	# check to see if code is in Symbol table
	if symbol_id in existing_symbols_in_price_data:
				
		# get the last date in the existing records
		recent_record_date = Daily_Price.select().order_by(Daily_Price.price_date.desc()).get().price_date
		print(recent_record_date)
		plus_1_day = datetime.timedelta(days=1)
		print(plus_1_day)	
		start_date = recent_record_date+plus_1_day
		start_date = start_date.strftime('%Y-%m-%d')
		print('Obtaining data for {}'.format(ticker))	
		print('New start date: {} '.format(start_date)) 	
		
		try:
			data = quandl.get("XASX/{}".format(ticker),
			 authtoken="cNEvWz9RmiPxEaCRLaHV",
			 start_date=start_date,
			 end_date=now_string)
			print(data.head())
			print(data.tail())
		except:
			print('Incorrect quandl code')
		
	else: 
		try:
			print('Getting daily data for {}'.format(ticker))
			data = quandl.get("XASX/{}".format(ticker),
				 authtoken="cNEvWz9RmiPxEaCRLaHV",
				 start_date=default_start_time,
				 end_date=now_string)
			print(data.head())
			print(data.tail())
		except:
			print('Incorrect quandl code')
	
	insert = True
	if insert == True:
		#insert into database
		print('Inserting {} into database'.format(ticker))
		data['Date']=data.index	
		data_dictionaries = data.to_dict('records')

		for data_dictionary in data_dictionaries:
			print('Inserting daily price record')
			print(data_dictionary)
			try:
				Daily_Price.create(data_vendor = vendor_data_id,
					symbol =symbol_id,
					price_date = data_dictionary['Date'],
					created_date = now,
					last_updated_date = now,
					open_price = data_dictionary['Open'],
					high_price = data_dictionary['High'],
					low_price = data_dictionary['Low'],
					close_price =data_dictionary['Close'],    
					#adj_close_price =data_dictionary[]		 
					volume =data_dictionary['Volume']) 
		# if does not exist, construct query
			except:
				print('Error')
	
	# construct query to send to quandl
	

	# turn data frame into a list of dictionaries


	# insert dictionary into database
	
	# save dataframe to database

	
	pass
	
def insert_all_daily_price(data_vendor):
	existing_ticker_download = True
	
	existing_symbols = Symbol.select()
	existing_ticker_list = [existing_symbol.ticker for existing_symbol in existing_symbols]
	existing_ticker_key =[existing_symbol.id for existing_symbol in existing_symbols]	


	existing_daily_price = Daily_Price.select()
	existing_daily_data_key_list = set([daily_price.id for daily_price in existing_daily_price])
	
		
	for existing_ticker in existing_ticker_list:
		ticker_id = Symbol.select().get(Symbol.id==existing_ticker)
		print(ticker_id)	
		if ticker_id not in existing_daily_data_key_list:

			insert_daily_price(existing_ticker,data_vendor)
	
def initialise():
	#asx_listing=open_ASX_listing_from_csv('asx_listing/ASXListedCompanies.csv')
	#insert_exchange(exchange,now)
	#insert_data_vendor(data_vendor,now)
	#insert_symbols(asx_listing,now,'asx','equity','AUD')
	#insert_daily_price('CBA','quandl')
	insert_all_daily_price('quandl')
if __name__=='__main__':
	initialise()
